{"version":3,"sources":["reportWebVitals.js","components/Frame/Frame.js","components/Tasks/Task3.js","index.js","components/Home/Home.js","components/Tasks/Task1.js","components/Tasks/Task2.js","components/Tasks/Task4.js","components/Tasks/Task5.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Frame","children","code","useState","stage","setStage","Stage","Stage1","Stage2","Stage3","className","Navbar","bg","Container","Brand","Row","Col","sm","Button","onClick","changeQueue","queueSize","setQueueSize","setTimeout","renderTask","setRenderTask","useEffect","Animated","springProps","useSpring","to","opacity","marginTop","from","config","duration","div","style","makeid","length","result","characters","charactersLength","i","push","charAt","Math","floor","random","join","style1","maxHeight","marginBottom","marginRight","style2","border","ReactDOM","render","StrictMode","exact","path","component","variant","setCode","finished","setFinished","answer","setAnswer","submitted","setSubmitted","selected","setSelected","tasks","question","Form","onSubmit","e","preventDefault","trim","Image","src","process","image","InputGroup","size","hasValidation","Control","type","aria-describedby","name","value","onChange","target","isInvalid","Append","taskSubmitted","Group","options","map","x","dangerouslySetInnerHTML","__html","padding","textAlign","answerSelected","disabled","option","setOption","Check","label","id","checked","console","log","document","getElementById"],"mappings":"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","file":"static/js/main.912ee52a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect, useState } from \"react\";\nimport { Button, Col, Container, Navbar, Row } from \"react-bootstrap\";\nimport { animated, useSpring } from \"react-spring\";\n\nexport default function Frame({ children, code }) {\n    const [stage, setStage] = useState(1);\n    let Stage = null;\n    switch (stage) {\n        case 1:\n            Stage = Stage1;\n            break;\n        case 2:\n            Stage = Stage2;\n            break;\n        case 3:\n            Stage = Stage3;\n            break;\n        default:\n            Stage = Stage1;\n    }\n    return <div className=\"d-flex flex-column min-vh-100\">\n        <Navbar bg=\"light\">\n            <Container>\n                <Navbar.Brand>Queue</Navbar.Brand>\n            </Container>\n        </Navbar>\n        <Stage setStage={setStage} code={code}>\n            {children}\n        </Stage>\n        <footer className=\"page-footer font-small pt-1 mt-auto bg-light\">\n            <div className=\"footer-copyright text-center py-3\" >Â© 2021 Copyright:\n                <span> RedClout Computing </span>\n            </div>\n        </footer>\n    </div>\n}\n\nfunction Stage1({ setStage }) {\n    return <div>\n        <br />\n        <Container>\n            <Row>\n                <Col sm={4}><h3>Please enter the queue</h3></Col>\n                <Col sm={8}><Button onClick={() => { setStage(2) }}>Enter queue</Button></Col>\n                <Col><hr /></Col>\n            </Row>\n            <Row>\n                <Col sm={5}>\n                    <p>\n                        If you have any questions regarding the course content or an assignment, please enter the queue to talk to a teaching assistant.\n                    </p>\n                </Col>\n                <Col sm={7}>\n                    <ul>\n                        <li>Current queue size: 5</li>\n                        <li>Estimate waiting time: 1 min</li>\n                        <li>Amount of TA's: 5</li>\n                    </ul>\n                </Col>\n            </Row>\n        </Container>\n    </div>\n}\n\nfunction changeQueue(queueSize, setQueueSize, setStage) {\n    if (queueSize === 0) {\n        setStage(3)\n        return;\n    }\n\n    setTimeout(() => {\n        setQueueSize(queueSize - 1)\n        changeQueue(queueSize - 1, setQueueSize, setStage)\n    }, 6000)\n}\n\nfunction Stage2({ children, setStage }) {\n    const [queueSize, setQueueSize] = useState(5);\n    const [renderTask, setRenderTask] = useState(false)\n\n    useEffect(() => {\n        changeQueue(queueSize, setQueueSize, setStage)\n        setTimeout(() => {\n            setRenderTask(true)\n        }, 5000)\n    }, [])\n\n    return <div>\n        <br />\n        <Container>\n            <Row>\n                <Col sm={12}><h3>You are enqueued</h3> There are <b>{queueSize}</b> people waiting before you</Col>\n                <Col><hr /></Col>\n            </Row>\n            <Row>\n                {renderTask && <Animated children={children} />}\n            </Row>\n        </Container>\n    </div>\n}\n\nfunction Animated({children}) {\n    const springProps = useSpring({\n        to: { opacity: 1, marginTop: 0},\n        from: { opacity: 0, marginTop: 10},\n        config: { duration: (1000) }\n    });\n\n    return (<animated.div style={{ ...springProps}}>{children}</animated.div>);\n}\n\nfunction makeid(length) {\n    var result = [];\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result.push(characters.charAt(Math.floor(Math.random() *\n            charactersLength)));\n    }\n    return result.join('');\n}\n\nfunction Stage3({ code }) {\n    return (<div>\n        <br />\n        <Container>\n            <Row>\n                <Col>\n                    <h3>Thank you for queueing</h3>\n                    <hr />\n                    <p>\n                        Please return to toloka now to fill out the questionnaire and enter your identification code.\n                    </p>\n                    <p><b>Identification code: {makeid(5) + code}</b></p>\n                </Col>\n            </Row>\n        </Container>\n    </div>)\n}","import Frame from \"../Frame/Frame\";\nimport { useState } from \"react\";\nimport { Image, Col, Button, Row, Container } from \"react-bootstrap\";\nimport tasks from \"../../tasks_data/tasks_3.json\";\n\nconst style1 = { maxHeight: \"100%\", marginBottom: \"25px\", marginRight: \"25px\" };\nconst style2 = {\n    ...style1,\n    border: \"5px solid rgba(125,125,125, 0.7)\",\n    \"borderRadius\": \"5px\"\n}\n\nexport default function Task3() {\n    const [code, setCode] = useState(0);\n    const [finished, setFinished] = useState(false);\n    const [answer, setAnswer] = useState(-1);\n    const [selected, setSelected] = useState(0);\n\n    if (finished) {\n        //setCode(1) //TBD encode correct\n        return (\n            <Frame code={code}>\n                <Col sm={12}>\n                    <p>Thank you for your time!</p>\n                </Col>\n            </Frame>\n        )\n    }\n\n    const taskSubmitted = () => {\n        setSelected(selected + 1);\n        setCode(code + 1);\n        setAnswer(-1)\n        if (selected >= tasks.length - 1) {\n            setFinished(true);\n        }\n    }\n\n    const answerSelected = (i) => {\n        setAnswer(i)\n    }\n\n    return <Frame code={code}>\n        <Col sm={12}>\n            <h5>Whilst you're waiting, why not do something productive? (not required for the task)</h5>\n            <p dangerouslySetInnerHTML={{ __html: tasks[selected].question }}></p>\n        </Col>\n        <Col sm={8}>\n            <Container>\n                <Row>\n                    {tasks[selected].options.map((x, i) => (\n                        <Col style={{ maxHeight: \"200px\", padding: \"10px\", textAlign: \"center\"}} sm={6}><Image src={process.env.PUBLIC_URL + x} style={i === answer ? style2 : style1} onClick={() => answerSelected(i)} /></Col>\n                    ))}\n                </Row>\n            </Container>\n            <br />\n            <Button onClick={taskSubmitted} disabled={answer === -1}>Submit</Button>\n            <br />\n            <br />\n        </Col>\n    </Frame>\n\n    //Show a word and 4 images, task workers have to choose the image that is described\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Route, HashRouter } from 'react-router-dom';\nimport Task1 from './components/Tasks/Task1';\nimport Task2 from './components/Tasks/Task2';\nimport Task3 from './components/Tasks/Task3';\nimport Task4 from './components/Tasks/Task4';\nimport Task5 from './components/Tasks/Task5';\nimport Home from './components/Home/Home';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<HashRouter >\n\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t<Route exact path=\"/task1\" component={Task1} />\n\t\t\t<Route exact path=\"/task2\" component={Task2} />\n\t\t\t<Route exact path=\"/task3\" component={Task3} />\n\t\t\t<Route exact path=\"/task4\" component={Task4} />\n\t\t\t<Route exact path=\"/task5\" component={Task5} />\n\t\t</HashRouter>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import Button from 'react-bootstrap/Button';\n\nexport default function Home() {\n    return (\n        <div>\n            <h1>Home</h1>\n            <Button variant=\"primary\">Primary</Button>{' '}\n            <Button variant=\"primary\">Primary</Button>{' '}\n            <Button variant=\"primary\">Primary</Button>{' '}\n        </div>\n    )\n}\n\n","import Frame from \"../Frame/Frame\"\nimport { useState } from \"react\";\nimport { Image, Form, Col, Button, InputGroup} from \"react-bootstrap\";\nimport tasks from \"../../tasks_data/tasks_1.json\";\n\nexport default function Task1() {\n    const [code, setCode] = useState(0);\n    const [finished, setFinished] = useState(false);\n    const [answer, setAnswer] = useState(\"\");\n    const [submitted, setSubmitted] = useState(false);\n    const [selected, setSelected] = useState(0);\n\n    if (finished) {\n        return (\n            <Frame code={code}>\n                <Col sm={12}>\n                    <p>Thank you for your time!</p>\n                </Col>\n            </Frame>)\n    }\n\n    const taskSubmitted = (e) => {  \n        e.preventDefault() \n        if (answer.trim().length > 0) {\n            setSubmitted(false);\n            setSelected(selected + 1);\n            setCode(code+1);\n\n            if (selected >= tasks.length - 1) {\n                setFinished(true);\n            }\n\n            setAnswer(\"\");\n        } else {\n            setSubmitted(true)\n        }\n    }\n\n    return (\n        <Frame code={code}>\n            <Col sm={12}>\n                <h5>Whilst you're waiting, why not do something productive? (not required for the task)</h5>\n                <p>{tasks[selected].question}</p>\n            </Col>\n            <Col sm={12}>\n                <Form onSubmit={taskSubmitted}>\n                    <Image src={process.env.PUBLIC_URL + tasks[selected].image} style={{ maxHeight: \"300px\", marginBottom: \"25px\" }} />\n                    <InputGroup size=\"sm\" className=\"mb-3\" hasValidation>\n                        <Form.Control type=\"text\" aria-describedby=\"inputGroup-sizing-sm\" name=\"answer\" value={answer} onChange={ e => setAnswer(e.target.value)} isInvalid={submitted && answer.trim().length === 0}/>\n                        <InputGroup.Append>\n                            <Button type=\"submit\">Submit</Button>\n                        </InputGroup.Append>\n                    </InputGroup>\n                </Form>\n            </Col>\n        </Frame>);\n}","import Frame from \"../Frame/Frame\"\nimport { useState } from \"react\";\nimport { Image, Col, Button, Form } from \"react-bootstrap\";\nimport tasks from \"../../tasks_data/tasks_2.json\"\n\nexport default function Task2() {\n    const [code, setCode] = useState(0);\n    const [finished, setFinished] = useState(false);\n    const [selected, setSelected] = useState(0);\n\n    if (finished) {\n        return (\n            <Frame code={code}>\n                <Col sm={12}>\n                    <p>Thank you for your time!</p>\n                </Col>\n            </Frame>)\n    }\n\n    const taskSubmitted = () => {   \n        setSelected(selected + 1);\n        setCode(code+1);\n\n        if (selected >= tasks.length - 1) {\n            setFinished(true);\n        }\n    }\n\n    return (\n        <Frame code={code}>\n            <Col sm={12}>\n                <h5>Whilst you're waiting, why not do something productive? (not required for the task)</h5>\n                <p>{tasks[selected].question}</p>\n            </Col>\n            <Col sm={12}>\n                <Image src={process.env.PUBLIC_URL + tasks[selected].image} style={{ maxHeight: \"300px\", marginBottom: \"25px\" }}></Image>\n                <Form>\n                    <Form.Group>\n                        {tasks[selected].options.map((x) => (<Button onClick={taskSubmitted} style={{marginRight: \"10px\"}}>{x}</Button>))}\n                    </Form.Group>\n                </Form>\n            </Col>\n        </Frame>);\n}","import Frame from \"../Frame/Frame\"\nimport { useState } from \"react\";\nimport { Form, Col, Button } from \"react-bootstrap\";\nimport tasks from \"../../tasks_data/tasks_4.json\";\n\nexport default function Task4() {\n    const [code, setCode] = useState(0);\n    const [finished, setFinished] = useState(false);\n    const [selected, setSelected] = useState(0);\n    const [submitted, setSubmitted] = useState(false);\n    const [option, setOption] = useState(\"\");\n    if (finished) {\n        return (\n            <Frame code={code}>\n                <Col sm={12}>\n                    <p>Thank you for your time!</p>\n                </Col>\n            </Frame>)\n    }\n\n    const taskSubmitted = () => { \n        // next task\n        console.log(option);\n        if (option.trim().length > 0) {\n            setSelected(selected + 1);\n            setCode(code+1);\n            setOption(\"\");\n            setSubmitted(false);\n            if (selected >= tasks.length - 1) {\n                setFinished(true);\n            }\n        } else {\n            setSubmitted(true);\n        }\n    }\n\n    return (\n        <Frame code={code} setCode={setCode}>\n            <Col sm={12}>\n                <h5>{tasks[selected].question} (not required to answer)</h5>\n                <Form>\n                    <Form.Group>\n                        {tasks[selected].options.map((x, i) => (\n                            <Form.Check label={x} name={`group${i}`} type=\"radio\" id={`inline-radio-${i}`}  isInvalid={submitted && option.trim().length === 0} onChange={() => setOption(x)} checked={(x === option)}  />\n                        ))}\n                    </Form.Group>\n                    <Button onClick={taskSubmitted}>Submit</Button>\n                </Form>\n            </Col>\n        </Frame>);\n}","import Frame from \"../Frame/Frame\"\nimport { useState } from \"react\";\n\nexport default function Task5() {\n    const [code, setCode] = useState(0);\n\n    return <Frame code={code}></Frame>\n    //Show loading animation, no task (benchmark)\n}"],"sourceRoot":""}